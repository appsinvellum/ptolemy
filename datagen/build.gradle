apply plugin: 'application'
apply plugin: 'groovy'

repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
    maven {
      url "http://repo.boundlessgeo.com/main"
    }

}


// check these dependencies ....
dependencies {
    compile 'log4j:log4j:1.2.17'
    compile project(':core')
    compile group: 'edu.harvard.chs', name : 'cite' , version: citeVersion
    compile group: 'edu.harvard.chs', name : 'greekutils' , version: greekutilsVersion

    compile group: 'edu.holycross.shot', name : 'greeklang' , version: greeklangVersion

    compile group : 'edu.unc.epidoc', name: 'transcoder', version : epidocVersion
    compile group: 'org.codehaus.groovy', name: 'groovy', version: groovyversion
}

task copyLicense {
    outputs.file new File("$buildDir/LICENSE")
    doLast {
        copy {
            from "LICENSE"
            into "$buildDir"
        }
    }
}

applicationDistribution.from(copyLicense) {
    into ""
}

task unedited(type:JavaExec) {
  description = "Generates individual .kml files for each Ptolemaic list not fully edited, using three arguments for XML source file, collections directory, and output directory"
   main = "ptolemy/UneditedKml"
   args = [file("${project.rootDir}/${xml}"), file("${project.rootDir}/collections"), file("${project.rootDir}/editing")]
   classpath = sourceSets.main.runtimeClasspath
}
unedited.doLast {
  println "\nDone generating KML files for unedited lists\n"
}





task fullcsv(type:JavaExec) {
  description = "Generates single .csv file from three arguments for XML source file, collections directory, and output directory"
  main = "ptolemy/FullCsv"
  args = [file("${project.rootDir}/${xml}"), file("${project.rootDir}/collections"), file("${project.rootDir}/r")]
  classpath = sourceSets.main.runtimeClasspath
}
fullcsv.doLast {
  println "\nDone generating composite csv file\n"
}



task kml(type:JavaExec) {
  description = "Generates kml..."
  main = "ptolemy/Kml"
  args = [file("${project.rootDir}/${xml}"), file("${project.rootDir}/collections"), file("${project.rootDir}/kml")]
  classpath = sourceSets.main.runtimeClasspath
}
kml.doLast {
  println "\nDone generating all kml files\n"
}



task geojson(type:JavaExec) {
  description = "Generates geojson..."
  main = "ptolemy/GeoJson"
  args = [file("${project.rootDir}/${xml}"), file("${project.rootDir}/collections"), file("${project.rootDir}/geojson")]
  classpath = sourceSets.main.runtimeClasspath
}
geojson.doLast {
  println "\nDone generating all geojson files\n"
}


task modern(type:JavaExec) {
  description = "Generates..."
  main = "ptolemy/ModernSites"
  args = [file("${project.rootDir}/${xml}"), file("${project.rootDir}/collections"), file("${project.rootDir}/r/provinces")]
  classpath = sourceSets.main.runtimeClasspath
modern.doLast {
  println "\nDone generating modern site data\n"
}
}



task ptolemy(dependsOn: [fullcsv, geojson, kml, modern, unedited]) {
  description = "Run all data generating tasks"
}
ptolemy.doLast {
  println "\nDone generating all data."
}