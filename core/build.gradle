import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*


apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "maven"


apply from: "versions.gradle"


if (hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${conf} found.")
    } else {
        apply from: conf
    }

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No configuration file ${confFile} found.")
    } else {
        println "Using default configuration in 'conf.gradle'"
        apply from: "conf.gradle"
    }
}

if (hasProperty('pub')) {
    System.err.print "Using configuration data from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found.")
    } else {
        println "Using default configuration in 'pub.gradle'"
        apply from: "pub.gradle"
    }
}

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}

repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
    maven {
      url "http://repo.boundlessgeo.com/main"
    }

}


dependencies {
  
  compile group: 'org.codehaus.groovy', name: 'groovy', version: groovyversion
  compile group: 'commons-io', name: 'commons-io', version: commonsioversion
  compile group: 'net.sf.saxon', name: 'saxon-dom', version: '8.7'

            
  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'
  testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitversion
  compile group: 'com.thaiopensource', name:'jing', version: jingversion

  // DOCUMENT THESE: 
  compile group: 'edu.harvard.chs', name : 'cite' , version: citeVersion
  compile group: 'edu.harvard.chs', name : 'greekutils' , version: greekutilsVersion
  compile group: 'edu.holycross.shot', name : 'greeklang' , version: greeklangVersion
  compile group : 'edu.unc.epidoc', name: 'transcoder', version : epidocVersion
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}



// for specs with concordion:
sourceSets {
    main {
        java {
            srcDir 'core/src'
        }
        resources {
            srcDir 'coresrc'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task cpCollections(type: Copy) {
  from "collections"
  into "${buildDir}/collections"
  description "Copies CITE Collections in .csv and .tsv format to build area"
}



task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  println "READING FILE TREE FROM " + mdSrc + " DIRECTORY"
  FileTree tree = fileTree(mdSrc) {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      println "Created ${htmlFile}"

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}


test.dependsOn setUpResources
test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")
}

task addVersion(){
}
addVersion.doLast {
  tokenMap["version"] = version
  tokenMap["deps"] = """
    <tr><td>epidoc</td><td>${epidocVersion}</td></tr>
    <tr><td>cite</td><td>${citeVersion}</td></tr>
    <tr><td>greekutils</td><td>${greekutilsVersion}</td></tr>
    <tr><td>greeklang</td><td>${greeklangVersion}</td></tr>""".toString() 
}

task conc(type: Copy, dependsOn: [test, addVersion, cpCollections]) {
//task conc(type: Copy) {
  from "${buildDir}/concordion-results"
  into "${buildDir}/concordion-formatted"
  filter(ReplaceTokens, tokens: tokenMap)
}
